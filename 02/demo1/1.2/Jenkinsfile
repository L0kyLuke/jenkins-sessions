pipeline {
    agent any
    // Añadimos un nuevo parámetro, será booleano. La variable que va a recoger ese parámetro es RC (valor por defecto false)
    parameters {
        booleanParam(name: 'RC', defaultValue: false, description: 'Is this a Release Candidate?')
    }
    // Entramos en la app y obtenemos la versión del package.json
    environment {
        VERSION = sh([ script: 'cd ./02/solution && npx -c \'echo $npm_package_version\'', returnStdout: true ]).trim()
        VERSION_RC = "rc.2"
    }
    stages {
        // Hacemos auditoría de herramientas para ver sus versiones
        stage('Audit tools') {
            steps {
                sh '''
                    git version
                    docker version
                    node --version
                    npm version
                '''
            }
        }
        stage('Build') {
            // Añadimos variable de entorno cuya valor va a estar condicionado a si el booleano anterior será true o false. Si estamos en una Release Candidate le damos el valor de VERSION_RC+texto extra, si no le damos el valor de VERSION_RC solo
            environment {
                VERSION_SUFFIX = sh(script:'if [ "${RC}" == "true" ] ; then echo -n "${VERSION_RC}+ci.${BUILD_NUMBER}"; else echo -n "${VERSION_RC}"; fi', returnStdout: true)
            }
            
            steps {
                // Entramos en la app y hacemos build e imprimimos como cambia la versión según el condicional anterior
                dir('./02/solution') {
                    // echo "Building version ${VERSION} with suffix: ${VERSION_RC}"
                    echo "Building version ${VERSION} with suffix: ${VERSION_SUFFIX}"
                    sh '''
                        npm install
                        npm run build
                    '''
                }
            }
        }
        // Tests unitarios
        stage('Unit Test') {
            steps {
                dir('./02/solution') {
                    sh 'npm test'
                }
            }
        }
        // Esta stage solo se ejecuta cuando sea una Release Candidate (o sea, la expresión booleana sea verdadera)
        stage('Publish') {
            when { // when acepta varias cosas: branch (para una rama específica), buildingTag (uso de tags), equals (expresión de igualdad), expression (expresión booleana)
                expression { return params.RC }
            }
            steps { // Se va a generar el directorio app/ y todos los ficheros generados con npm run build se van a guardar en él
                archiveArtifacts('02/solution/app/')
            }
        }
    }
}